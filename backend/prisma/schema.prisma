generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                       @id @default(uuid())
  email                    String                       @unique
  passwordHash             String
  createdAt                DateTime                     @default(now())
  avatar                   String?
  department               String?
  githubUsername           String?
  jobTitle                 String?
  language                 String?                      @default("id")
  name                     String?
  notifyEmail              Boolean                      @default(true)
  notifyInApp              Boolean                      @default(true)
  notifySms                Boolean                      @default(false)
  phoneNumber              String?
  timezone                 String?                      @default("Asia/Jakarta")
  emailVerified            Boolean                      @default(false)
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?
  verificationToken        String?
  verificationTokenExpiry  DateTime?
  planExpiry               DateTime?
  planId                   String?
  notifications            Notification[]
  planHistories            PlanHistory[]
  projects                 Project[]                    @relation("ProjectOwner")
  sentInvitations          ProjectInvite[]              @relation("InviteSender")
  memberships              ProjectMember[]
  SourceMap                SourceMap[]
  plan                     Plan?                        @relation(fields: [planId], references: [id])
  notificationPreferences  UserNotificationPreferences?
}

model Project {
  id                   String                       @id @default(uuid())
  name                 String
  ownerId              String
  dsn                  String                       @unique
  createdAt            DateTime                     @default(now())
  errorGroups          ErrorGroup[]
  events               Event[]
  owner                User                         @relation("ProjectOwner", fields: [ownerId], references: [id])
  invites              ProjectInvite[]
  members              ProjectMember[]
  SourceMap            SourceMap[]
  webhooks             Webhook[]
  notificationSettings ProjectNotificationSettings?
  errorSequences       ErrorSequence[]
  activeUserCounts     ActiveUserCount[]
  jiraConfig           JiraProjectConfig?
  deployments          Deployment[]
}

model ProjectMember {
  id                         String              @id @default(uuid())
  projectId                  String
  userId                     String
  role                       String
  errorGroupsAssigned        ErrorGroup[]        @relation("ProjectMemberAssignedTo")
  errorGroupCommentsAuthored ErrorGroupComment[] @relation("ProjectMemberCommentAuthor")
  jiraIssuesCreated          JiraIntegration[]
  project                    Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user                       User                @relation(fields: [userId], references: [id])
}

model ProjectInvite {
  id        String   @id @default(uuid())
  projectId String
  email     String
  role      String
  token     String   @unique
  status    String   @default("PENDING")
  expiresAt DateTime
  createdAt DateTime @default(now())
  invitedBy String
  inviter   User     @relation("InviteSender", fields: [invitedBy], references: [id])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email, projectId])
}

model ErrorGroup {
  id                 String                    @id @default(uuid())
  projectId          String
  fingerprint        String
  errorType          String
  message            String
  count              Int                       @default(1)
  firstSeen          DateTime                  @default(now())
  lastSeen           DateTime                  @default(now())
  statusCode         Int?
  assignedTo         String?
  status             String                    @default("open")
  updatedAt          DateTime                  @updatedAt
  code               String                    @unique
  userImpactLastHour Float                     @default(0)
  userImpactLastDay  Float                     @default(0)
  userImpactLastWeek Float                     @default(0)
  assignee           ProjectMember?            @relation("ProjectMemberAssignedTo", fields: [assignedTo], references: [id])
  project            Project                   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  comments           ErrorGroupComment[]
  events             Event[]
  jiraIssues         JiraIntegration[]
  errorSequencesFrom ErrorSequence[]           @relation("ErrorSequenceFrom")
  errorSequencesTo   ErrorSequence[]           @relation("ErrorSequenceTo")
  rootCauseAnalyses  RootCauseAnalysis[]
  deploymentRelations ErrorDeploymentRelation[]
  errorPredictions   ErrorPrediction[]

  @@unique([projectId, fingerprint])
}

model ErrorGroupComment {
  id        String        @id @default(uuid())
  groupId   String
  authorId  String
  content   String
  createdAt DateTime      @default(now())
  author    ProjectMember @relation("ProjectMemberCommentAuthor", fields: [authorId], references: [id])
  group     ErrorGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Event {
  id             String      @id @default(uuid())
  projectId      String
  timestamp      DateTime    @default(now())
  errorType      String
  message        String
  stacktrace     String?
  userAgent      String?
  groupId        String?
  statusCode     Int?
  tags           Json?
  userContext    Json?
  browser        String?
  browserVersion String?
  deviceType     String?
  environment    String?
  os             String?
  osVersion      String?
  release        String?
  url            String?     @default("")
  method         String?     @default("GET")
  path           String?
  query          Json?
  params         Json?
  headers        Json?
  ip             String?
  language       String?
  referrer       String?
  screenSize     String?
  code           String      @unique
  group          ErrorGroup? @relation(fields: [groupId], references: [id])
  project        Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  rootCauseAnalysis RootCauseAnalysis?
  errorPredictions ErrorPrediction[]
}

model Webhook {
  id         String            @id @default(uuid())
  projectId  String
  url        String
  enabled    Boolean           @default(true)
  eventType  String?
  secret     String?
  createdAt  DateTime          @default(now())
  project    Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deliveries WebhookDelivery[]
}

model WebhookDelivery {
  id           String    @id @default(uuid())
  webhookId    String
  eventId      String?
  requestBody  String
  responseBody String?
  statusCode   Int?
  success      Boolean
  error        String?
  sentAt       DateTime  @default(now())
  responseAt   DateTime?
  webhook      Webhook   @relation(fields: [webhookId], references: [id], onDelete: Cascade)
}

model Plan {
  id            String        @id @default(uuid())
  name          String        @unique
  price         Int?
  features      Json?
  planHistories PlanHistory[]
  users         User[]
}

model PlanHistory {
  id        String    @id @default(uuid())
  userId    String
  planId    String
  startDate DateTime
  endDate   DateTime?
  action    String
  note      String?
  plan      Plan      @relation(fields: [planId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model SourceMap {
  id            String   @id
  projectId     String
  release       String
  sourceFile    String
  minifiedFile  String?
  sourceMap     Json
  originalFiles String[]
  filename      String
  fileSize      Int?
  contentType   String?
  uploadedBy    String?
  isActive      Boolean  @default(true)
  environment   String?
  buildNumber   String?
  gitCommit     String?
  metadata      Json?
  source        String?  @db.Text
  version       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  Project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User          User?    @relation(fields: [uploadedBy], references: [id])

  @@unique([projectId, release, sourceFile])
  @@index([environment, release])
  @@index([isActive])
  @@index([projectId, release])
  @@index([uploadedBy])
}

model ProjectNotificationSettings {
  id                    String   @id @default(uuid())
  projectId             String   @unique
  emailEnabled          Boolean  @default(false)
  slackEnabled          Boolean  @default(false)
  slackWebhookUrl       String?
  discordEnabled        Boolean  @default(false)
  discordWebhookUrl     String?
  telegramEnabled       Boolean  @default(false)
  telegramBotToken      String?
  telegramChatId        String?
  notifyOnNewError      Boolean  @default(true)
  notifyOnResolvedError Boolean  @default(false)
  minimumErrorLevel     String   @default("error")
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  project               Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model UserNotificationPreferences {
  id           String   @id @default(uuid())
  userId       String   @unique
  emailEnabled Boolean  @default(true)
  inAppEnabled Boolean  @default(true)
  smsEnabled   Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ErrorSequence {
  id          String     @id @default(uuid())
  projectId   String
  userId      String?
  fromErrorId String
  toErrorId   String
  occurredAt  DateTime   @default(now())
  sessionId   String?
  timeGap     Int // Waktu dalam detik antara fromError dan toError
  fromError   ErrorGroup @relation("ErrorSequenceFrom", fields: [fromErrorId], references: [id], onDelete: Cascade)
  toError     ErrorGroup @relation("ErrorSequenceTo", fields: [toErrorId], references: [id], onDelete: Cascade)
  project     Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId, userId])
  @@index([fromErrorId, toErrorId])
  @@index([occurredAt])
}

model ActiveUserCount {
  id         String   @id @default(uuid())
  projectId  String
  timestamp  DateTime @default(now())
  timeWindow String // '1h', '24h', '7d'
  userCount  Int
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, timeWindow, timestamp])
  @@index([projectId, timeWindow])
}

model JiraIntegration {
  id           String        @id @default(uuid())
  jiraIssueKey String
  jiraIssueUrl String
  groupId      String
  errorId      String?
  createdById  String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  createdBy    ProjectMember @relation(fields: [createdById], references: [id])
  group        ErrorGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@index([groupId])
  @@index([createdById])
}

model JiraProjectConfig {
  id          String   @id @default(uuid())
  projectId   String   @unique
  baseUrl     String
  email       String
  apiToken    String
  projectKey  String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

// Model untuk Root Cause Analysis
model RootCauseAnalysis {
  id            String      @id @default(uuid())
  eventId       String      @unique
  event         Event       @relation(fields: [eventId], references: [id])
  groupId       String
  errorGroup    ErrorGroup  @relation(fields: [groupId], references: [id])
  analyzedAt    DateTime    @default(now())
  
  // Kemungkinan penyebab
  probableCauses Json       @default("[]")
  
  // Rekomendasi perbaikan
  recommendations Json       @default("[]")
  
  // Deployment terkait
  relatedDeployments String[] @default([])
  
  // Analisis detail
  stackFrames     Json       @default("[]")
  systemConditions Json       @default("{}")
  relatedEvents   String[]   @default([])
  
  // Status dan metadata
  status          String      @default("pending")
  processingTime  Int?
  version         Int         @default(1)
  
  // Timestamps
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([eventId])
  @@index([groupId, status])
}

// Model untuk prediksi error dari ML model
model ErrorPrediction {
  id            String      @id @default(uuid())
  eventId       String      
  event         Event       @relation(fields: [eventId], references: [id])
  groupId       String?
  errorGroup    ErrorGroup? @relation(fields: [groupId], references: [id])
  
  // Hasil prediksi
  probableCauses Json       @default("[]")
  
  // Metadata prediksi
  predictionTime Int
  modelVersion   String     @default("1.0.0")
  
  // Timestamps
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  @@index([eventId])
  @@index([groupId])
}

// Model untuk Deployment dan integrasi git
model Deployment {
  id            String      @id @default(uuid())
  projectId     String
  project       Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Informasi Deployment
  version       String      // Versi deployment atau tag
  environment   String      // production, staging, dev, dsb
  status        String      @default("success") // success, failed, in_progress
  
  // Informasi Git
  repository    String?     // URL repository atau nama
  branch        String?     // Branch yang di-deploy
  commitHash    String?     // Hash commit terbaru di deployment
  commitMessage String?     // Pesan commit terkait
  authorName    String?     // Nama author commit
  authorEmail   String?     // Email author commit
  
  // Informasi perubahan
  changedFiles  Json?       // Array file yang berubah
  
  // Analisis error
  errorCount    Int         @default(0)    // Jumlah error yang terdeteksi setelah deployment
  relatedErrors ErrorDeploymentRelation[]
  
  // Metadata
  metadata      Json?       // Data tambahan spesifik deployment
  
  // Timestamps
  deployedAt    DateTime    @default(now())
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@index([projectId, environment])
  @@index([deployedAt])
  @@index([commitHash])
}

// Relasi antara Deployment dan ErrorGroup
model ErrorDeploymentRelation {
  id            String      @id @default(uuid())
  deploymentId  String
  errorGroupId  String
  deployment    Deployment  @relation(fields: [deploymentId], references: [id], onDelete: Cascade)
  errorGroup    ErrorGroup  @relation(fields: [errorGroupId], references: [id], onDelete: Cascade)
  firstSeenAt   DateTime    @default(now())
  createdAt     DateTime    @default(now())

  @@unique([deploymentId, errorGroupId])
  @@index([deploymentId])
  @@index([errorGroupId])
}

// Model untuk knowledge base error
model ErrorKnowledgeBase {
  id                  String   @id @default(uuid())
  errorType           String   // Tipe error (SYNTAX_ERROR, RUNTIME_ERROR, dll)
  pattern             String   // Pattern pesan error
  keywords            String[] // Kata kunci untuk pencarian
  solutionTitle       String   // Judul solusi
  solutionDescription String   // Deskripsi solusi
  solutionCodeExample String?  // Contoh kode untuk solusi
  successRate         Float    @default(0.5) // Tingkat keberhasilan solusi (0-1)
  context             Json?    // Konteks tambahan (framework, library, dsb)
  source              String   @default("manual") // Sumber data (manual, community, ml)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([errorType])
  @@index([keywords])
}

// Model untuk rekomendasi solusi
model SolutionRecommendation {
  id             String   @id @default(uuid())
  errorId        String   // ID dari error yang diberikan rekomendasi
  title          String   // Judul rekomendasi
  description    String   // Deskripsi detail rekomendasi
  codeExample    String?  // Contoh kode untuk solusi
  confidence     Float    // Tingkat kepercayaan rekomendasi (0-1)
  source         String   // Sumber rekomendasi (knowledge_base, generic, ml, user_feedback)
  relevanceScore Float    @default(0.5) // Skor relevansi terhadap error (0-1)
  isApplied      Boolean  @default(false) // Apakah solusi sudah diterapkan
  appliedAt      DateTime? // Kapan solusi diterapkan
  feedback       String?  // Feedback pengguna (helpful, not_helpful)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([errorId])
  @@index([source])
  @@index([isApplied])
}
