generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  email        String    @unique
  passwordHash String
  createdAt    DateTime  @default(now())
  
  // Field profil pengguna yang baru
  name         String?
  phoneNumber  String?
  avatar       String?
  timezone     String?   @default("Asia/Jakarta")
  language     String?   @default("id")
  jobTitle     String?
  department   String?
  githubUsername String?
  
  // Status Verifikasi Email
  emailVerified  Boolean  @default(false)
  verificationToken String? // Token untuk verifikasi email
  verificationTokenExpiry DateTime? // Waktu kedaluwarsa token verifikasi
  
  // Field untuk reset password
  resetPasswordToken String? // Token untuk reset password
  resetPasswordTokenExpiry DateTime? // Waktu kedaluwarsa token reset password
  
  // Preferensi notifikasi
  notifyEmail  Boolean   @default(true)
  notifyInApp  Boolean   @default(true)
  notifySms    Boolean   @default(false)
  
  projects     Project[] @relation("ProjectOwner")
  memberships  ProjectMember[]
}

model Project {
  id        String         @id @default(uuid())
  name      String
  owner     User           @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId   String
  dsn       String         @unique
  createdAt DateTime       @default(now())
  members   ProjectMember[]
  events    Event[]
  errorGroups ErrorGroup[]
  webhooks  Webhook[]
}

model ProjectMember {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      String   // e.g. 'admin', 'member'
  errorGroupsAssigned ErrorGroup[] @relation("ProjectMemberAssignedTo")
  errorGroupCommentsAuthored ErrorGroupComment[] @relation("ProjectMemberCommentAuthor")
}

model ErrorGroup {
  id          String   @id @default(uuid())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  fingerprint String
  errorType   String
  message     String
  count       Int      @default(1)
  firstSeen   DateTime @default(now())
  lastSeen    DateTime @default(now())
  status      String   @default("open") // open, resolved, ignored
  assignedTo  String?  // relasi ke ProjectMember.id (bisa null)
  assignee    ProjectMember? @relation("ProjectMemberAssignedTo", fields: [assignedTo], references: [id])
  updatedAt   DateTime @updatedAt
  events      Event[]
  statusCode  Int?
  comments    ErrorGroupComment[]
  @@unique([projectId, fingerprint])
}

model ErrorGroupComment {
  id        String   @id @default(uuid())
  group     ErrorGroup @relation(fields: [groupId], references: [id])
  groupId   String
  author    ProjectMember @relation("ProjectMemberCommentAuthor", fields: [authorId], references: [id])
  authorId  String
  content   String
  createdAt DateTime @default(now())
}

model Event {
  id         String   @id @default(uuid())
  project    Project  @relation(fields: [projectId], references: [id])
  projectId  String
  timestamp  DateTime @default(now())
  errorType  String
  message    String
  stacktrace String?
  userAgent  String?
  group      ErrorGroup? @relation(fields: [groupId], references: [id])
  groupId    String?
  statusCode  Int?
  userContext Json?
  tags       Json?
}

model Webhook {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  url       String
  enabled   Boolean  @default(true)
  eventType String?  // opsional: 'all', 'error', dsb
  secret    String?  // opsional: untuk signature
  createdAt DateTime @default(now())
  deliveries WebhookDelivery[]
}

model WebhookDelivery {
  id           String   @id @default(uuid())
  webhook      Webhook  @relation(fields: [webhookId], references: [id])
  webhookId    String
  eventId      String?
  requestBody  String   // JSON payload yang dikirim
  responseBody String?  // Response dari webhook endpoint
  statusCode   Int?     // HTTP status code dari response
  success      Boolean  // Status keberhasilan pengiriman
  error        String?  // Error message jika gagal
  sentAt       DateTime @default(now())
  responseAt   DateTime?
} 