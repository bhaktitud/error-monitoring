generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String          @id @default(uuid())
  email                    String          @unique
  passwordHash             String
  createdAt                DateTime        @default(now())
  avatar                   String?
  department               String?
  githubUsername           String?
  jobTitle                 String?
  language                 String?         @default("id")
  name                     String?
  notifyEmail              Boolean         @default(true)
  notifyInApp              Boolean         @default(true)
  notifySms                Boolean         @default(false)
  phoneNumber              String?
  timezone                 String?         @default("Asia/Jakarta")
  emailVerified            Boolean         @default(false)
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?
  verificationToken        String?
  verificationTokenExpiry  DateTime?
  planExpiry               DateTime?
  planId                   String?
  notifications            Notification[]
  planHistories            PlanHistory[]
  projects                 Project[]       @relation("ProjectOwner")
  sentInvitations          ProjectInvite[] @relation("InviteSender")
  memberships              ProjectMember[]
  SourceMap                SourceMap[]
  plan                     Plan?           @relation(fields: [planId], references: [id])
}

model Project {
  id          String          @id @default(uuid())
  name        String
  ownerId     String
  dsn         String          @unique
  createdAt   DateTime        @default(now())
  errorGroups ErrorGroup[]
  events      Event[]
  owner       User            @relation("ProjectOwner", fields: [ownerId], references: [id])
  invites     ProjectInvite[]
  members     ProjectMember[]
  SourceMap   SourceMap[]
  webhooks    Webhook[]
}

model ProjectMember {
  id                         String              @id @default(uuid())
  projectId                  String
  userId                     String
  role                       String
  errorGroupsAssigned        ErrorGroup[]        @relation("ProjectMemberAssignedTo")
  errorGroupCommentsAuthored ErrorGroupComment[] @relation("ProjectMemberCommentAuthor")
  project                    Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user                       User                @relation(fields: [userId], references: [id])
}

model ProjectInvite {
  id        String   @id @default(uuid())
  projectId String
  email     String
  role      String
  token     String   @unique
  status    String   @default("PENDING")
  expiresAt DateTime
  createdAt DateTime @default(now())
  invitedBy String
  inviter   User     @relation("InviteSender", fields: [invitedBy], references: [id])
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([email, projectId])
}

model ErrorGroup {
  id          String              @id @default(uuid())
  projectId   String
  fingerprint String
  errorType   String
  message     String
  count       Int                 @default(1)
  firstSeen   DateTime            @default(now())
  lastSeen    DateTime            @default(now())
  statusCode  Int?
  assignedTo  String?
  status      String              @default("open")
  updatedAt   DateTime            @updatedAt
  assignee    ProjectMember?      @relation("ProjectMemberAssignedTo", fields: [assignedTo], references: [id])
  project     Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  comments    ErrorGroupComment[]
  events      Event[]

  @@unique([projectId, fingerprint])
}

model ErrorGroupComment {
  id        String        @id @default(uuid())
  groupId   String
  authorId  String
  content   String
  createdAt DateTime      @default(now())
  author    ProjectMember @relation("ProjectMemberCommentAuthor", fields: [authorId], references: [id])
  group     ErrorGroup    @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Event {
  id             String      @id @default(uuid())
  projectId      String
  timestamp      DateTime    @default(now())
  errorType      String
  message        String
  stacktrace     String?
  userAgent      String?
  groupId        String?
  statusCode     Int?
  tags           Json?
  userContext    Json?
  browser        String?
  browserVersion String?
  deviceType     String?
  environment    String?
  os             String?
  osVersion      String?
  release        String?
  url            String?     @default("")
  method         String?     @default("GET")
  path           String?
  query          Json?
  params         Json?
  headers        Json?
  ip             String?
  language       String?
  referrer       String?
  screenSize     String?
  group          ErrorGroup? @relation(fields: [groupId], references: [id])
  project        Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Webhook {
  id         String            @id @default(uuid())
  projectId  String
  url        String
  enabled    Boolean           @default(true)
  eventType  String?
  secret     String?
  createdAt  DateTime          @default(now())
  project    Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  deliveries WebhookDelivery[]
}

model WebhookDelivery {
  id           String    @id @default(uuid())
  webhookId    String
  eventId      String?
  requestBody  String
  responseBody String?
  statusCode   Int?
  success      Boolean
  error        String?
  sentAt       DateTime  @default(now())
  responseAt   DateTime?
  webhook      Webhook   @relation(fields: [webhookId], references: [id], onDelete: Cascade)
}

model Plan {
  id            String        @id @default(uuid())
  name          String        @unique
  price         Int?
  features      Json?
  planHistories PlanHistory[]
  users         User[]
}

model PlanHistory {
  id        String    @id @default(uuid())
  userId    String
  planId    String
  startDate DateTime
  endDate   DateTime?
  action    String
  note      String?
  plan      Plan      @relation(fields: [planId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Notification {
  id        String   @id @default(uuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}

model SourceMap {
  id            String   @id
  projectId     String
  release       String
  sourceFile    String
  minifiedFile  String?
  sourceMap     Json
  originalFiles String[]
  filename      String
  fileSize      Int?
  contentType   String?
  uploadedBy    String?
  isActive      Boolean  @default(true)
  environment   String?
  buildNumber   String?
  gitCommit     String?
  metadata      Json?
  source        String?  @db.Text
  version       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime
  Project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  User          User?    @relation(fields: [uploadedBy], references: [id])

  @@unique([projectId, release, sourceFile])
  @@index([environment, release])
  @@index([isActive])
  @@index([projectId, release])
  @@index([uploadedBy])
}
