// Base URL untuk API
const API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || 'http://localhost:3000/api';

// Interface untuk user context dan tags
interface UserContext {
  userId?: string;
  [key: string]: unknown;
}

interface Tags {
  version?: string;
  [key: string]: unknown;
}

/**
 * Fungsi utility untuk melakukan request ke API
 */
export async function apiRequest<T>(
  path: string,
  options: RequestInit = {}
): Promise<T> {
  // Ambil token dari localStorage (client-side)
  const token = typeof window !== 'undefined' ? localStorage.getItem('authToken') : null;
  
  // Default headers
  const headers = {
    'Content-Type': 'application/json',
    ...(token ? { Authorization: `Bearer ${token}` } : {}),
    ...(options.headers || {}),
  };

  try {
    const response = await fetch(`${API_BASE_URL}${path}`, {
      ...options,
      headers,
    });

    if (!response.ok) {
      // Parse error response
      const errorData = await response.json().catch(() => ({
        error: 'Terjadi kesalahan server'
      }));
      throw new Error(errorData.error || 'Terjadi kesalahan pada server');
    }
    
    // Parse response sebagai JSON
    return await response.json();
  } catch (error) {
    console.error('API request error:', error);
    throw error;
  }
}

/**
 * Auth API endpoints
 */
export const AuthAPI = {
  // Login user
  login: async (email: string, password: string) => {
    return apiRequest<{ token: string }>('/auth/login', {
      method: 'POST',
      body: JSON.stringify({ email, password }),
    });
  },

  // Register user
  register: async (email: string, password: string) => {
    return apiRequest<{ id: string; email: string }>('/auth/register', {
      method: 'POST',
      body: JSON.stringify({ email, password }),
    });
  },

  // Get current user profile
  getCurrentUser: async () => {
    return apiRequest<{
      id: string;
      email: string;
      name?: string;
    }>('/auth/me');
  },
};

/**
 * Projects API endpoints
 */
export const ProjectsAPI = {
  // Get all projects for current user
  getProjects: async () => {
    return apiRequest<Array<{
      id: string;
      name: string;
      dsn: string;
      createdAt: string;
    }>>('/projects');
  },

  // Create a new project
  createProject: async (name: string) => {
    return apiRequest<{
      id: string;
      name: string;
      dsn: string;
    }>('/projects', {
      method: 'POST',
      body: JSON.stringify({ name }),
    });
  },

  // Get project members
  getProjectMembers: async (projectId: string) => {
    return apiRequest<Array<{
      id: string;
      role: string;
      user: {
        id: string;
        email: string;
      }
    }>>(`/projects/${projectId}/members`);
  },

  // Invite member to project
  inviteMember: async (projectId: string, email: string, role: string) => {
    return apiRequest<{
      id: string;
      role: string;
      user: {
        id: string;
        email: string;
      }
    }>(`/projects/${projectId}/members`, {
      method: 'POST',
      body: JSON.stringify({ email, role }),
    });
  },

  // Change member role
  changeMemberRole: async (projectId: string, memberId: string, role: string) => {
    return apiRequest<{
      id: string;
      role: string;
      user: {
        id: string;
        email: string;
      }
    }>(`/projects/${projectId}/members/${memberId}`, {
      method: 'PATCH',
      body: JSON.stringify({ role }),
    });
  },

  // Remove member from project
  removeMember: async (projectId: string, memberId: string) => {
    return apiRequest<{ success: boolean }>(`/projects/${projectId}/members/${memberId}`, {
      method: 'DELETE',
    });
  },
};

/**
 * Error Events API endpoints
 */
export const EventsAPI = {
  // Get events for a project
  getEvents: async (projectId: string) => {
    return apiRequest<Array<{
      id: string;
      errorType: string;
      message: string;
      timestamp: string;
      stacktrace: string;
      userAgent: string;
      statusCode: number;
      userContext: UserContext;
      tags: Tags;
    }>>(`/events/project/${projectId}`);
  },
};

/**
 * Error Groups API endpoints
 */
export const GroupsAPI = {
  // Get error groups for a project
  getGroups: async (projectId: string) => {
    return apiRequest<Array<{
      id: string;
      errorType: string;
      message: string;
      count: number;
      firstSeen: string;
      lastSeen: string;
      status: string;
      statusCode: number;
      assignedTo: string;
      updatedAt: string;
    }>>(`/projects/${projectId}/groups`);
  },

  // Get events in a group
  getGroupEvents: async (groupId: string) => {
    return apiRequest<Array<{
      id: string;
      errorType: string;
      message: string;
      timestamp: string;
      stacktrace: string;
      userAgent: string;
      statusCode: number;
      userContext: UserContext;
      tags: Tags;
    }>>(`/groups/${groupId}/events`);
  },

  // Change group status
  changeGroupStatus: async (groupId: string, status: string) => {
    return apiRequest<{
      id: string;
      status: string;
    }>(`/groups/${groupId}/status`, {
      method: 'PATCH',
      body: JSON.stringify({ status }),
    });
  },

  // Assign group to member
  assignGroup: async (groupId: string, memberId: string | null) => {
    return apiRequest<{
      id: string;
      assignedTo: string;
    }>(`/groups/${groupId}/assign`, {
      method: 'PATCH',
      body: JSON.stringify({ memberId }),
    });
  },

  // Get comments for a group
  getComments: async (groupId: string) => {
    return apiRequest<Array<{
      id: string;
      content: string;
      createdAt: string;
      author: {
        id: string;
        user: {
          id: string;
          email: string;
        };
      };
    }>>(`/groups/${groupId}/comments`);
  },

  // Add comment to group
  addComment: async (groupId: string, content: string) => {
    return apiRequest<{
      id: string;
      content: string;
      createdAt: string;
      author: {
        id: string;
        user: {
          id: string;
          email: string;
        };
      };
    }>(`/groups/${groupId}/comments`, {
      method: 'POST',
      body: JSON.stringify({ content }),
    });
  },
};

/**
 * Webhooks API endpoints
 */
export const WebhooksAPI = {
  // Get webhooks for a project
  getWebhooks: async (projectId: string) => {
    return apiRequest<Array<{
      id: string;
      url: string;
      enabled: boolean;
      eventType: string;
      secret: string;
      createdAt: string;
    }>>(`/projects/${projectId}/webhooks`);
  },

  // Create a new webhook
  createWebhook: async (
    projectId: string, 
    data: { url: string; enabled: boolean; eventType: string; secret: string }
  ) => {
    return apiRequest<{
      id: string;
      url: string;
      enabled: boolean;
      eventType: string;
      secret: string;
      createdAt: string;
    }>(`/projects/${projectId}/webhooks`, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  },

  // Update webhook
  updateWebhook: async (
    webhookId: string,
    data: { url: string; enabled: boolean; eventType: string; secret: string }
  ) => {
    return apiRequest<{
      id: string;
      url: string;
      enabled: boolean;
      eventType: string;
      secret: string;
      createdAt: string;
    }>(`/webhooks/${webhookId}`, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  },

  // Delete webhook
  deleteWebhook: async (webhookId: string) => {
    return apiRequest<{ success: boolean }>(`/webhooks/${webhookId}`, {
      method: 'DELETE',
    });
  },
}; 